(< 2.2 3)

(* 131 2.3 2 12 3)

(null? (quote ()))


(define length
  (lambda (L)
    (if (null? L)
        0
        (+ 1 (length (cdr L))))))

(length (quote ()))
(length (quote (4 5 6)))


(define append
  (lambda (L1 L2)
    (if (null? L1)
        L2
        (cons (car L1) (append (cdr L1) L2)))))

(append (quote (4 5)) (quote (6 7)))

(define reverse-list
  (lambda (L)
    (if (null? L)
        L
        (append (reverse-list (cdr L)) (cons (car L) (quote ()))))))


(reverse-list (quote ()))
(reverse-list (quote (1 2 3 4 5 6 7 8 9 10 11 12 13)))
(reverse-list (quote (("computer" "science") "is" "awesome")))

(car (cdr (quote (2 3 4))))